version: 0.1
component: build
timeoutInSeconds: 1200
shell: bash

env:
  variables:
    REGISTRY: "mx-queretaro-1.ocir.io"
    NAMESPACE: "axfvmmw9g9lu"
    REPOSITORY: "taskmanager"
    IMAGE_NAME: "frontend-service"

  exportedVariables:
    - IMAGE_FULL_NAME
    - VERSION

steps:
  - type: Command
    name: "Use Docker for Node.js Build"
    timeoutInSeconds: 900
    command: |
      echo "üê≥ Building frontend using Docker (bypassing GLIBC issues)..."
      
      echo "üìã System info:"
      cat /etc/os-release 2>/dev/null || echo "OS info not available"
      docker --version
      
      echo "Creating temporary Dockerfile for build..."
      cat > Dockerfile.build << 'EOF'
      FROM node:20.12.1-alpine
      
      WORKDIR /app
      
      # Copiar package files
      COPY package*.json ./
      
      # Instalar dependencias
      RUN npm install --legacy-peer-deps
      
      # Copiar c√≥digo fuente
      COPY . .
      
      # Build de la aplicaci√≥n
      RUN npm run build
      
      # Comando para copiar el resultado
      CMD ["cp", "-r", "/app/dist", "/output/"]
      EOF
      
      echo "üöÄ Building with Docker..."
      
      # Crear directorio para output
      mkdir -p ./build-output
      
      # Build de la imagen temporal
      docker build -f Dockerfile.build -t frontend-builder .
      
      if [ $? -ne 0 ]; then
        echo "‚ùå Docker build failed!"
        exit 1
      fi
      
      # Ejecutar el build y extraer el resultado usando docker cp
      echo "üì¶ Extracting build output..."
      
      # Crear un contenedor temporal para extraer archivos
      CONTAINER_ID=$(docker create frontend-builder)
      
      if [ -z "$CONTAINER_ID" ]; then
        echo "‚ùå Failed to create container!"
        exit 1
      fi
      
      echo "üìã Container created: $CONTAINER_ID"
      
      # Copiar el directorio dist desde el contenedor
      docker cp "$CONTAINER_ID:/app/dist" ./dist
      
      if [ $? -ne 0 ]; then
        echo "‚ùå Failed to extract build output!"
        docker rm "$CONTAINER_ID"
        exit 1
      fi
      
      # Limpiar el contenedor temporal
      docker rm "$CONTAINER_ID"
      
      echo "üìã Build completed, checking results:"
      ls -la dist/
      
      # Verificar que el build se gener√≥ correctamente
      if [ ! -d "dist" ]; then
        echo "‚ùå Expected dist/ directory not found!"
        exit 1
      fi
      
      DIST_SIZE=$(du -sh dist/ | cut -f1)
      echo "üì¶ Build size: $DIST_SIZE"
      echo "üìã Dist contents:"
      ls -la dist/
      
      # Limpiar archivos temporales
      rm -f Dockerfile.build
      
      echo "‚úÖ Frontend build successful using Docker!"

  - type: Command
    name: "Prepare Docker build"
    timeoutInSeconds: 120
    command: |
      echo "üì¶ Preparing Docker build context..."
      
      echo "Build directory contents:"
      ls -la
      
      echo "Dist directory contents:"
      ls -la dist/
      
      echo "Verifying nginx.conf exists..."
      if [ ! -f "nginx.conf" ]; then
        echo "‚ö†Ô∏è nginx.conf not found, creating default configuration..."
        cat > nginx.conf << 'EOF'
      server {
          listen 80;
          server_name localhost;
          root /usr/share/nginx/html;
          index index.html;
          
          location / {
              try_files $uri $uri/ /index.html;
          }
          
          # Gzip compression
          gzip on;
          gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
      }
      EOF
        echo "‚úÖ Default nginx.conf created"
      fi
      
      echo "Creating optimized production Dockerfile..."
      cat > Dockerfile << 'EOF'
      FROM nginx:alpine
      
      # Copiar archivos build al nginx
      COPY dist/ /usr/share/nginx/html/
      
      # Copiar configuraci√≥n de nginx si existe
      COPY nginx.conf /etc/nginx/conf.d/default.conf
      
      EXPOSE 80
      
      CMD ["nginx", "-g", "daemon off;"]
      EOF
      
      echo "‚úÖ Docker build context prepared (Frontend with Nginx)"

  - type: Command
    name: "Build Docker image"
    timeoutInSeconds: 900
    command: |
      # Generar versi√≥n
      VERSION="$(date +'%Y%m%d-%H%M%S')"
      if [ -d ".git" ]; then
        COMMIT_SHORT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        VERSION="${VERSION}-${COMMIT_SHORT}"
      fi
      
      IMAGE_TAG="${REGISTRY}/${NAMESPACE}/${REPOSITORY}/${IMAGE_NAME}:${VERSION}"
      LATEST_TAG="${REGISTRY}/${NAMESPACE}/${REPOSITORY}/${IMAGE_NAME}:latest"
      
      echo "üê≥ Building Docker image: ${IMAGE_TAG}"
      
      echo "üöÄ Building Docker image..."
      docker build --no-cache -t "${IMAGE_TAG}" -t "${LATEST_TAG}" .
      
      if [ $? -ne 0 ]; then
        echo "‚ùå Docker build failed!"
        exit 1
      fi
      
      echo "‚úÖ Docker image built successfully!"
            
      # Exportar variables para el deployment pipeline
      export IMAGE_FULL_NAME="${IMAGE_TAG}"
      export VERSION="${VERSION}"
      
      echo "============================================"
      echo "‚úÖ FRONTEND SERVICE BUILD COMPLETED!"
      echo "üì¶ Image: ${IMAGE_FULL_NAME}"
      echo "üè∑Ô∏è Version: ${VERSION}"
      echo "üì§ Registry: ${REGISTRY}/${NAMESPACE}/${REPOSITORY}/${IMAGE_NAME}"
      echo "============================================"

outputArtifacts:
  - name: frontend-service-image
    type: DOCKER_IMAGE
    location: ${IMAGE_FULL_NAME}