version: 0.1
component: build
timeoutInSeconds: 1200
shell: bash

env:
  variables:
    REGISTRY: "mx-queretaro-1.ocir.io"
    NAMESPACE: "axfvmmw9g9lu"
    REPOSITORY: "taskmanager"
    IMAGE_NAME: "frontend-service"

  exportedVariables:
    - IMAGE_FULL_NAME
    - VERSION

steps:
  - type: Command
    name: "Install Node.js 18 via NVM"
    timeoutInSeconds: 600
    command: |
      echo "üîß Installing Node.js 18 via NVM (compatible with older GLIBC)..."
      
      # Verificar versi√≥n del sistema
      echo "üìã System info:"
      cat /etc/os-release 2>/dev/null || echo "OS info not available"
      ldd --version 2>/dev/null || echo "GLIBC info not available"
      
      # Instalar NVM
      echo "üì¶ Installing NVM..."
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
      
      # Cargar NVM
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
      
      if ! command -v nvm &> /dev/null; then
        echo "‚ö†Ô∏è NVM installation failed, trying alternative approach..."
        
        # Alternativa: usar Node.js precompilado m√°s compatible
        echo "üîÑ Trying Node.js 16 (better GLIBC compatibility)..."
        curl -fsSL https://nodejs.org/dist/v16.20.2/node-v16.20.2-linux-x64.tar.xz -o node-v16.tar.xz
        
        if [ -f "node-v16.tar.xz" ]; then
          tar -xf node-v16.tar.xz -C /opt/
          NODE_DIR=$(find /opt -maxdepth 1 -name "node-v16*" -type d | head -1)
          if [ ! -z "$NODE_DIR" ]; then
            ln -sf "$NODE_DIR" /opt/node
            export PATH=/opt/node/bin:$PATH
            echo "‚úÖ Node.js 16 installed as fallback: $NODE_DIR"
          else
            echo "‚ùå Node.js extraction failed!"
            exit 1
          fi
        else
          echo "‚ùå Node.js download failed!"
          exit 1
        fi
      else
        echo "‚úÖ NVM installed successfully"
        
        # Instalar Node.js 18 via NVM
        echo "üì¶ Installing Node.js 18..."
        nvm install 18
        nvm use 18
        nvm alias default 18
      fi
      
      echo "‚úÖ Node.js installation completed"

  - type: Command
    name: "Build Frontend Application"
    timeoutInSeconds: 900
    command: |
      # Cargar NVM si est√° disponible
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
      
      # Si NVM est√° disponible, usar Node 18, sino usar el PATH configurado
      if command -v nvm &> /dev/null; then
        nvm use 18
      else
        export PATH=/opt/node/bin:$PATH
      fi
      
      echo "üü¢ Verifying Node.js installation:"
      node --version
      npm --version
      
      if ! command -v node &> /dev/null; then
        echo "‚ùå Node.js not found in PATH!"
        exit 1
      fi
      
      echo "üì¶ Installing dependencies..."
      npm install --legacy-peer-deps
      
      if [ $? -ne 0 ]; then
        echo "‚ùå npm install failed!"
        exit 1
      fi
      
      echo "üöÄ Building frontend application..."
      npm run build
      
      if [ $? -ne 0 ]; then
        echo "‚ùå Frontend build failed!"
        exit 1
      fi
      
      echo "üìã Build completed, checking results:"
      ls -la dist/
      
      # Verificar que el build se gener√≥ correctamente
      if [ ! -d "dist" ]; then
        echo "‚ùå Expected dist/ directory not found!"
        echo "üìã Searching for alternative build directories:"
        ls -la
        exit 1
      fi
      
      DIST_SIZE=$(du -sh dist/ | cut -f1)
      echo "üì¶ Build size: $DIST_SIZE"
      
      echo "‚úÖ Frontend build successful!"

  - type: Command
    name: "Prepare Docker build"
    timeoutInSeconds: 120
    command: |
      echo "üì¶ Preparing Docker build context..."
      
      echo "Build directory contents:"
      ls -la
      
      echo "Dist directory contents:"
      ls -la dist/
      
      echo "Verifying nginx.conf exists..."
      if [ ! -f "nginx.conf" ]; then
        echo "‚ö†Ô∏è nginx.conf not found, creating default configuration..."
        cat > nginx.conf << 'EOF'
      server {
          listen 80;
          server_name localhost;
          root /usr/share/nginx/html;
          index index.html;
          
          location / {
              try_files $uri $uri/ /index.html;
          }
          
          # Gzip compression
          gzip on;
          gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
      }
      EOF
        echo "‚úÖ Default nginx.conf created"
      fi
      
      echo "Creating optimized Dockerfile..."
      cat > Dockerfile << 'EOF'
      FROM --platform=linux/amd64 node:18 AS build
      
      WORKDIR /FrontEnd-Oracle
      
      COPY package*.json ./
      RUN npm install --legacy-peer-deps
      
      COPY . .
      RUN npm run build
      
      FROM --platform=linux/amd64 nginx:alpine
      
      COPY --from=build /FrontEnd-Oracle/dist /usr/share/nginx/html
      
      COPY nginx.conf /etc/nginx/conf.d/default.conf
      
      EXPOSE 80
      
      CMD ["nginx", "-g", "daemon off;"]
      EOF
      
      echo "‚úÖ Docker build context prepared (Frontend with Nginx)"

  - type: Command
    name: "Build Docker image"
    timeoutInSeconds: 900
    command: |
      # Generar versi√≥n
      VERSION="$(date +'%Y%m%d-%H%M%S')"
      if [ -d ".git" ]; then
        COMMIT_SHORT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        VERSION="${VERSION}-${COMMIT_SHORT}"
      fi
      
      IMAGE_TAG="${REGISTRY}/${NAMESPACE}/${REPOSITORY}/${IMAGE_NAME}:${VERSION}"
      LATEST_TAG="${REGISTRY}/${NAMESPACE}/${REPOSITORY}/${IMAGE_NAME}:latest"
      
      echo "üê≥ Building Docker image: ${IMAGE_TAG}"
      
      echo "üöÄ Building Docker image..."
      docker build --no-cache -t "${IMAGE_TAG}" -t "${LATEST_TAG}" .
      
      if [ $? -ne 0 ]; then
        echo "‚ùå Docker build failed!"
        exit 1
      fi
      
      echo "‚úÖ Docker image built successfully!"
            
      # Exportar variables para el deployment pipeline
      export IMAGE_FULL_NAME="${IMAGE_TAG}"
      export VERSION="${VERSION}"
      
      echo "============================================"
      echo "‚úÖ FRONTEND SERVICE BUILD COMPLETED!"
      echo "üì¶ Image: ${IMAGE_FULL_NAME}"
      echo "üè∑Ô∏è Version: ${VERSION}"
      echo "üì§ Registry: ${REGISTRY}/${NAMESPACE}/${REPOSITORY}/${IMAGE_NAME}"
      echo "============================================"

outputArtifacts:
  - name: frontend-service-image
    type: DOCKER_IMAGE
    location: ${IMAGE_FULL_NAME}